import queryString from 'query-string'
import { useEffect, useState } from 'react'
import { axios } from 'src/utils/axios'
import { getErrorMessage } from 'src/utils/utils'
import { notiToast } from '../common/Toast'

// Generated by https://quicktype.io

export interface INoti {
  senderId: string
  notificationStatus: boolean
  createdAt: number
  receiverId: string
  body: Body
  title: Title
  username: Username
  userType: UserType
  updatedAt: number
  notificationType: NotificationType
  largeIcon: string
  notificationId: string
}

export enum Body {
  Aaabbb911110ASentYouAFriendRequest = '#aaabbb911110A sent you a friend request',
  The3DSinceYouUpdatedYourDiaryNow = '3d since you updated your diary now!',
}

export enum NotificationType {
  FriendRequest = 'FRIEND_REQUEST',
  RemindOnDiaryUpdate = 'REMIND_ON_DIARY_UPDATE',
}

export enum Title {
  Zporter = 'Zporter',
  ZporterDiary = 'Zporter Diary',
}

export enum UserType {
  Player = 'PLAYER',
  SysAdmin = 'SYS_ADMIN',
}

export enum Username {
  Aaabbb911110A = 'aaabbb911110A',
  Zporter = 'Zporter',
}

export const NotificationsList = () => {
  const { loading, notifications, unreadCount } = useNotiList()

  return <div className=" "></div>
}

export const useNotiList = () => {
  const [notifications, setNotifications] = useState<INoti[]>([])
  const [unreadCount, setUnreadCount] = useState(0)
  const [loading, setLoading] = useState(true)

  const getListNoti = async () => {
    try {
      setLoading(true)
      const params = {
        limit: 100,
        sorted: 'asc',
      }
      const { data } = await axios.get(
        `/notifications/get-list-notifications?${queryString.stringify(params)}`
      )
      setNotifications(data.data)
      setUnreadCount(data.unreadNotification)
    } catch (error) {
      notiToast({
        message: getErrorMessage(error),
        type: 'error',
      })
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    getListNoti()
  }, [])
  return {
    loading,
    notifications,
    setNotifications,
    unreadCount,
  }
}
